libos.entrypoint = "{{ entrypoint }}"

loader.preload = "file:{{ gramine.libos }}"
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.insecure__use_cmdline_argv = true
loader.log_level = "{{ log_level }}"

# for eventfd test
sys.insecure__allow_eventfd = true

fs.mount.graphene_lib.type = "chroot"
fs.mount.graphene_lib.path = "/lib"
fs.mount.graphene_lib.uri = "file:{{ gramine.runtimedir() }}"

fs.mount.host_lib.type = "chroot"
fs.mount.host_lib.path = "{{ arch_libdir }}"
fs.mount.host_lib.uri = "file:{{ arch_libdir }}"

fs.mount.host_usr_lib.type = "chroot"
fs.mount.host_usr_lib.path = "/usr/{{ arch_libdir }}"
fs.mount.host_usr_lib.uri = "file:/usr/{{ arch_libdir }}"

fs.mount.bin.type = "chroot"
fs.mount.bin.path = "/bin"
fs.mount.bin.uri = "file:/bin"

fs.mount.devkmsg.type = "chroot"
fs.mount.devkmsg.path = "/dev/kmsg"
fs.mount.devkmsg.uri = "dev:/dev/kmsg"

sgx.trusted_files = [
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/libgcc_s.so.1",
  "file:/usr/local/{{ arch_libdir }}/", 
  "file:{{ entrypoint }}",
]

#sgx.allowed_files.tmp_dir = "file:tmp/"
#sgx.allowed_files.root = "file:root" # for getdents test
#sgx.allowed_files.testfile = "file:testfile" # for mmap_file test

sgx.thread_num = 16

sgx.nonpie_binary = true
